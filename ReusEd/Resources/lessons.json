[
    {
        "id": 1,
        "type": "text",
        "title": "Control Flow",
        "description": "Learn how to build control flow into your python code by including if, else, and elif statements.",
        "duration": "3h 45min",
        "progress": 0,
        "background": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonBackground.png",
        "sections": [
            {
                "id": 1,
                "title": "1. Elif Statement",
                "data": [
                    {
                        "id": 1,
                        "text": "The Python elif statement allows for continued checks to be performed after an initial if statement. An elif statement differs from the else statement because another expression is provided to be checked, just as with the initial if statement.",
                        "image": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonImage2.png"
                    },
                    {
                        "id": 2,
                        "text": "If the expression is True, the indented code following the elif is executed. If the expression evaluates to False, the code can continue to an optional else statement. Multiple elif statements can be used following an initial if to perform a series of checks. Once an elif expression evaluates to True, no further elif statements are executed.",
                        "image": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonImage1.png"
                    },
                    {
                        "id": 3,
                        "text": "If the expression is True, the indented code following the elif is executed. If the expression evaluates to False, the code can continue to an optional else statement. Multiple elif statements can be used following an initial if to perform a series of checks. Once an elif expression evaluates to True, no further elif statements are executed.",
                        "image": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonImage2.png"
                    }
                ]
            },
            {
                "id": 2,
                "title": "2. Repeating of the Elif Statement",
                "data": [
                    {
                        "id": 1,
                        "text": "The Python elif statement allows for continued checks to be performed after an initial if statement. An elif statement differs from the else statement because another expression is provided to be checked, just as with the initial if statement.",
                        "image": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonImage2.png"
                    },
                    {
                        "id": 2,
                        "text": "If the expression is True, the indented code following the elif is executed. If the expression evaluates to False, the code can continue to an optional else statement. Multiple elif statements can be used following an initial if to perform a series of checks. Once an elif expression evaluates to True, no further elif statements are executed.",
                        "image": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonImage1.png"
                    },
                    {
                        "id": 3,
                        "text": "If the expression is True, the indented code following the elif is executed. If the expression evaluates to False, the code can continue to an optional else statement. Multiple elif statements can be used following an initial if to perform a series of checks. Once an elif expression evaluates to True, no further elif statements are executed.",
                        "image": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonImage2.png"
                    }
                ]
            }
        ]
    },
    {
        "id": 2,
        "type": "text",
        "title": "Variables and Data Types",
        "description": "Learn how to build control flow into your python code by including if, else, and elif statements.",
        "duration": "3h 45min",
        "progress": 0,
        "background": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonBackground.png",
        "sections": [
            {
                "id": 1,
                "title": "1. Elif Statement",
                "data": [
                    {
                        "id": 1,
                        "text": "The Python elif statement allows for continued checks to be performed after an initial if statement. An elif statement differs from the else statement because another expression is provided to be checked, just as with the initial if statement.",
                        "image": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonImage2.png"
                    },
                    {
                        "id": 2,
                        "text": "If the expression is True, the indented code following the elif is executed. If the expression evaluates to False, the code can continue to an optional else statement. Multiple elif statements can be used following an initial if to perform a series of checks. Once an elif expression evaluates to True, no further elif statements are executed.",
                        "image": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonImage1.png"
                    },
                    {
                        "id": 3,
                        "text": "If the expression is True, the indented code following the elif is executed. If the expression evaluates to False, the code can continue to an optional else statement. Multiple elif statements can be used following an initial if to perform a series of checks. Once an elif expression evaluates to True, no further elif statements are executed.",
                        "image": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonImage2.png"
                    }
                ]
            },
            {
                "id": 2,
                "title": "2. Repeating of the Elif Statement",
                "data": [
                    {
                        "id": 1,
                        "text": "The Python elif statement allows for continued checks to be performed after an initial if statement. An elif statement differs from the else statement because another expression is provided to be checked, just as with the initial if statement.",
                        "image": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonImage2.png"
                    },
                    {
                        "id": 2,
                        "text": "If the expression is True, the indented code following the elif is executed. If the expression evaluates to False, the code can continue to an optional else statement. Multiple elif statements can be used following an initial if to perform a series of checks. Once an elif expression evaluates to True, no further elif statements are executed.",
                        "image": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonImage1.png"
                    },
                    {
                        "id": 3,
                        "text": "If the expression is True, the indented code following the elif is executed. If the expression evaluates to False, the code can continue to an optional else statement. Multiple elif statements can be used following an initial if to perform a series of checks. Once an elif expression evaluates to True, no further elif statements are executed.",
                        "image": "https://raw.githubusercontent.com/ahrorjabborov/reused_data/main/textLessonImage2.png"
                    }
                ]
            }
        ]
    },
    {
        "id": 3,
        "type": "video",
        "title": "Loops",
        "description": "Python programming language provides the following types of loops to handle looping requirements. Python provides three ways for executing the loops. While all the ways provide similar basic functionality, they differ in their syntax and condition checking time.",
        "duration": "3h 45min",
        "progress": 0,
        "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4",
        "stamps": [
            {
                "seconds": 0,
                "textTime": "0:00",
                "textDescription": "Introduction to Loops"
            },
            {
                "seconds": 120,
                "textTime": "2:00",
                "textDescription": "Loops in general"
            },
            {
                "seconds": 180,
                "textTime": "3:00",
                "textDescription": "For loops"
            },
            {
                "seconds": 300,
                "textTime": "5:00",
                "textDescription": "While loops"
            },
            {
                "seconds": 420,
                "textTime": "7:00",
                "textDescription": "Some other points of loops"
            },
            {
                "seconds": 600,
                "textTime": "10:00",
                "textDescription": "Conclusion and Recap"
            }
        ]
    },
    {
        "id": 4,
        "type": "quiz",
        "title": "Final Quiz",
        "description": "Python programming language provides the following types of loops to handle looping requirements. Python provides three ways for executing the loops. While all the ways provide similar basic functionality, they differ in their syntax and condition checking time.",
        "duration": "3h 45min",
        "progress": 0,
        "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4",
        "stamps": [
            {
                "seconds": 0,
                "textTime": "0:00",
                "textDescription": "Introduction to Loops"
            },
            {
                "seconds": 120,
                "textTime": "2:00",
                "textDescription": "Loops in general"
            },
            {
                "seconds": 180,
                "textTime": "3:00",
                "textDescription": "For loops"
            },
            {
                "seconds": 300,
                "textTime": "5:00",
                "textDescription": "While loops"
            },
            {
                "seconds": 420,
                "textTime": "7:00",
                "textDescription": "Some other points of loops"
            },
            {
                "seconds": 600,
                "textTime": "10:00",
                "textDescription": "Conclusion and Recap"
            }
        ]
    }
]

